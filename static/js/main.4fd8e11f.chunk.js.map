{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","renderSquare","i","squares","Game","state","xIsNext","stepNumber","history","Array","fill","step","this","setState","slice","length","calculateWinner","concat","current","winner","moves","map","move","desc","key","jumpTo","status","handleClick","React","Component","winnerLines","a","b","c","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4fd8e11f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Square(props){\r\n\treturn (\r\n\t\t<button className = \"square\" onClick = {props.onClick}>\r\n\t\t\t{props.value}\r\n\t\t</button>\t\r\n\t);\r\n}","import React from 'react';\r\nimport Square from './Square.js';\r\n\r\nexport default function Board(props){\r\n\tconst renderSquare = (i) =>{\r\n\t\treturn(\r\n\t\t\t<Square \r\n\t\t\t\tvalue = {props.squares[i]} \r\n\t\t\t\tonClick = {() => props.onClick(i)}\r\n\t\t\t></Square>\r\n\t\t);\r\n\t};\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t<div className = \"row\">\r\n\t\t\t\t{renderSquare(0)}\r\n\t\t\t\t{renderSquare(1)}\r\n\t\t\t\t{renderSquare(2)}\r\n\t\t\t</div>\r\n\t\t\t<div className = \"row\">\r\n\t\t\t\t{renderSquare(3)}\r\n\t\t\t\t{renderSquare(4)}\r\n\t\t\t\t{renderSquare(5)}\r\n\t\t\t</div>\r\n\t\t\t<div className = \"row\">\r\n\t\t\t\t{renderSquare(6)}\r\n\t\t\t\t{renderSquare(7)}\r\n\t\t\t\t{renderSquare(8)}\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t);\r\n}","import React from 'react';\r\nimport Board from './Board.js';\r\n\r\nexport default class Game extends React.Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\txIsNext: true,\r\n\t\t\tstepNumber: 0,\r\n\t\t\thistory: [ { squares: Array(9).fill(null) }],\r\n\t\t};\r\n\t}\r\n\r\n\tjumpTo(step){\r\n\t\tthis.setState({\r\n\t\t\tstepNumber: step,\r\n\t\t\txIsNext: step % 2 === 0,\r\n\t\t\thistory: this.state.history.slice(0, step + 1),\r\n\t\t});\r\n\t}\r\n\t\r\n\thandleClick(i){\r\n\t\tconst history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst squares = current.squares.slice();\r\n\t\tconst winner = calculateWinner(squares);\r\n\t\tif (winner || squares[i]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsquares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\t\tthis.setState({\r\n\t\t\thistory: history.concat({\r\n\t\t\t\tsquares: squares,\r\n\t\t\t}),\r\n\t\t\txIsNext: !this.state.xIsNext,\r\n\t\t\tstepNumber: history.length,\r\n\t\t});\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst history = this.state.history;\r\n\t\tconst current = history[history.length - 1];\r\n\t\tconst winner = calculateWinner(current.squares);\r\n\t\tconst moves = history.map((step, move) => {\r\n\t\t\tconst desc = move ? 'Go to #' + move : 'Start the Game';\r\n\t\t\treturn(\r\n\t\t\t\t<li key = {move}>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\tthis.jumpTo(move);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{desc}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</li>\t\t\t\r\n\t\t\t);\r\n\t\t});\r\n\t\tlet status = winner ? 'Winner is ' + winner : 'Next Player is ' + (this.state.xIsNext ? 'X' : 'O');\r\n\t\t\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div className = \"game\">\r\n\t\t\t\t<div className = \"game-board\">\r\n\t\t\t\t\t<Board\r\n\t\t\t\t\t\tonClick = {(i) => this.handleClick(i)}\r\n\t\t\t\t\t\tsquares = {current.squares}\r\n\t\t\t\t\t></Board>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"game-info\">\r\n\t\t\t\t\t<div>{status}</div>\r\n\t\t\t\t\t<ul>{moves}</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\t\t\t\t\t\r\n\t\t);\r\n\r\n\t}\r\n}\r\n\r\nfunction calculateWinner(squares){\r\n\tconst winnerLines = [\r\n\t\t[0,1,2],\r\n\t\t[3,4,5],\r\n\t\t[6,7,8],\r\n\t\t[0,3,6],\r\n\t\t[1,4,7],\r\n\t\t[2,5,8],\r\n\t\t[0,4,8],\r\n\t\t[2,4,6],\r\n\t];\r\n\r\n\tfor (let i = 0; i < winnerLines.length; i++) {\r\n\t\tconst [a, b, c] = winnerLines[i];\r\n\t//\tconsole.log(a, b, c);\r\n\r\n\t\tif(squares[a] && squares[a] === squares[b] && squares[b] === squares[c]){\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t \r\n\t}\r\n\treturn null;\r\n}","import React from 'react';\nimport './App.css';\nimport Square from './components/Square.js';\nimport Board from './components/Board.js';\nimport Game from './components/Game.js';\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <h1>Welcome to Tic-Tac-Toe Game!</h1>\n      <Game />\n      <h3>Developed by <a href=\"https://dhritisaha.netlify.app\">Dhriti Saha</a></h3>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}